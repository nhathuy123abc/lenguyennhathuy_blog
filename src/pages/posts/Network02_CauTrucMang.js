export default function Network02_CauTrucMang() {
  return (
    <div className="p-8 bg-blue-50 min-h-screen">
      <h1 className="text-4xl font-bold text-blue-700 mb-6">
        C·∫•u Tr√∫c M·∫£ng Trong L·∫≠p Tr√¨nh M·∫°ng üß©
      </h1>

      <h2 className="text-2xl font-semibold text-blue-600 mb-2">
        1Ô∏è‚É£ V√¨ sao c·∫ßn c·∫•u tr√∫c m·∫£ng trong l·∫≠p tr√¨nh m·∫°ng?
      </h2>
      <p className="text-gray-700 mb-4 leading-relaxed">
        Trong qu√° tr√¨nh truy·ªÅn d·ªØ li·ªáu qua m·∫°ng, d·ªØ li·ªáu th∆∞·ªùng ƒë∆∞·ª£c chia nh·ªè
        th√†nh c√°c g√≥i (packet). M·ªói g√≥i c√≥ c√°c ph·∫ßn t·ª≠ d·ªØ li·ªáu kh√°c nhau nh∆∞ ƒë·ªãa
        ch·ªâ IP, c·ªïng, ƒë·ªô d√†i, checksum, n·ªôi dung,‚Ä¶ Khi l·∫≠p tr√¨nh, ta c·∫ßn m·ªôt c·∫•u
        tr√∫c d·ªØ li·ªáu (<code>struct</code>) ƒë·ªÉ m√¥ t·∫£ g√≥i tin, v√† m·∫£ng (array ho·∫∑c
        buffer) ƒë·ªÉ ch·ª©a d·ªØ li·ªáu th·ª±c t·∫ø g·ª≠i/nh·∫≠n. V√¨ v·∫≠y, m·∫£ng v√† c·∫•u tr√∫c l√† hai
        y·∫øu t·ªë c·ªët l√µi ƒë·ªÉ thao t√°c d·ªØ li·ªáu m·∫°ng hi·ªáu qu·∫£.
      </p>

      <h2 className="text-2xl font-semibold text-blue-600 mt-8 mb-2">
        ‚öôÔ∏è 2. C·∫•u tr√∫c d·ªØ li·ªáu trong l·∫≠p tr√¨nh m·∫°ng
      </h2>
      <p className="text-gray-700 mb-4 leading-relaxed">
        Trong h·∫ßu h·∫øt c√°c ng√¥n ng·ªØ (ƒë·∫∑c bi·ªát l√† C/C++), ta s·ª≠ d·ª•ng{" "}
        <code>struct</code> ƒë·ªÉ m√¥ t·∫£ th√¥ng tin c·ªßa m·ªôt k·∫øt n·ªëi ho·∫∑c m·ªôt g√≥i tin.
        V√≠ d·ª•:
      </p>

      <pre className="bg-gray-900 text-white rounded-lg p-4 overflow-x-auto mb-4 text-sm">
{`struct sockaddr_in {
    short sin_family;        // Lo·∫°i giao th·ª©c (AF_INET cho IPv4)
    unsigned short sin_port; // S·ªë c·ªïng (port)
    struct in_addr sin_addr; // ƒê·ªãa ch·ªâ IP
    char sin_zero[8];        // ƒê·ªám cho ƒë·ªß k√≠ch th∆∞·ªõc
};`}
      </pre>

      <p className="text-gray-700 mb-6">
        <strong>Gi·∫£i th√≠ch:</strong> <br />
        <span className="block ml-4">
          ‚Ä¢ <code>sin_family</code>: lo·∫°i giao th·ª©c (AF_INET cho IPv4, AF_INET6 cho IPv6).<br />
          ‚Ä¢ <code>sin_port</code>: s·ªë c·ªïng, chuy·ªÉn sang network byte order b·∫±ng <code>htons()</code>.<br />
          ‚Ä¢ <code>sin_addr</code>: ch·ª©a ƒë·ªãa ch·ªâ IP.<br />
          ‚Ä¢ <code>sin_zero</code>: v√πng ƒë·ªám (padding) ƒë·ªÉ ƒë·ªìng b·ªô k√≠ch th∆∞·ªõc struct.
        </span>
      </p>

      <h2 className="text-2xl font-semibold text-blue-600 mt-8 mb-2">
        üß† 3. M·∫£ng trong x·ª≠ l√Ω d·ªØ li·ªáu m·∫°ng
      </h2>

      <h3 className="text-xl font-semibold text-blue-500 mb-2">
        üî∏ a. Buffer ‚Äì v√πng ƒë·ªám d·ªØ li·ªáu
      </h3>
      <pre className="bg-gray-900 text-white rounded-lg p-4 overflow-x-auto mb-4 text-sm">
{`char buffer[1024];
recv(client_socket, buffer, sizeof(buffer), 0);
printf("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c: %s\\n", buffer);`}
      </pre>
      <p className="text-gray-700 mb-6 leading-relaxed">
        ·ªû ƒë√¢y, <code>buffer</code> l√† m·∫£ng k√Ω t·ª± ch·ª©a d·ªØ li·ªáu nh·∫≠n t·ª´ m·∫°ng,
        <code>recv()</code> l√† h√†m nh·∫≠n d·ªØ li·ªáu, v√†{" "}
        <code>sizeof(buffer)</code> x√°c ƒë·ªãnh k√≠ch th∆∞·ªõc t·ªëi ƒëa c·ªßa m·∫£ng.
      </p>

      <h3 className="text-xl font-semibold text-blue-500 mb-2">
        üî∏ b. M·∫£ng byte (byte array)
      </h3>
      <pre className="bg-gray-900 text-white rounded-lg p-4 overflow-x-auto mb-4 text-sm">
{`unsigned char packet[512];`}
      </pre>
      <p className="text-gray-700 mb-6 leading-relaxed">
        M·ªói ph·∫ßn t·ª≠ trong <code>packet</code> l√† m·ªôt byte d·ªØ li·ªáu c·ªßa g√≥i tin. V√≠ d·ª•:
        <br />
        Byte 0‚Äì1: ƒë·ªô d√†i d·ªØ li·ªáu. <br />
        Byte 2‚Äì3: checksum. <br />
        Byte 4 tr·ªü ƒëi: d·ªØ li·ªáu th·ª±c t·∫ø.
      </p>

      <h2 className="text-2xl font-semibold text-blue-600 mt-8 mb-2">
        üåê 4. M·∫£ng trong vi·ªác ƒë√≥ng g√≥i (packing) v√† gi·∫£i g√≥i (unpacking)
      </h2>
      <p className="text-gray-700 mb-4 leading-relaxed">
        Khi giao ti·∫øp gi·ªØa hai m√°y t√≠nh, ta c·∫ßn ƒë√≥ng g√≥i d·ªØ li·ªáu (serialize) tr∆∞·ªõc
        khi g·ª≠i v√† gi·∫£i g√≥i (deserialize) khi nh·∫≠n. V√≠ d·ª•:
      </p>

      <pre className="bg-gray-900 text-white rounded-lg p-4 overflow-x-auto mb-4 text-sm">
{`struct Student {
    int id;
    char name[50];
    float score;
};

unsigned char buffer[sizeof(struct Student)];
memcpy(buffer, &student, sizeof(student));
send(sock, buffer, sizeof(buffer), 0);

// Khi nh·∫≠n:
recv(sock, buffer, sizeof(buffer), 0);
memcpy(&student, buffer, sizeof(student));`}
      </pre>

      <p className="text-gray-700 mb-6 leading-relaxed">
        M·∫£ng byte l√† ph∆∞∆°ng ti·ªán gi√∫p chuy·ªÉn d·ªØ li·ªáu ph·ª©c t·∫°p (nh∆∞ struct) qua
        m·∫°ng an to√†n v√† th·ªëng nh·∫•t gi·ªØa c√°c h·ªá th·ªëng kh√°c nhau.
      </p>

      <h2 className="text-2xl font-semibold text-blue-600 mt-8 mb-2">
        üï∏Ô∏è 5. M·∫£ng trong m√¥ h√¨nh x·ª≠ l√Ω g√≥i tin (packet structure)
      </h2>

      <table className="w-full text-left border border-blue-200 mb-4">
        <thead>
          <tr className="bg-blue-100">
            <th className="p-2 border border-blue-200">Byte</th>
            <th className="p-2 border border-blue-200">√ù nghƒ©a</th>
            <th className="p-2 border border-blue-200">K√≠ch th∆∞·ªõc</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td className="p-2 border border-blue-200">0‚Äì1</td>
            <td className="p-2 border border-blue-200">Lo·∫°i g√≥i tin</td>
            <td className="p-2 border border-blue-200">2 byte</td>
          </tr>
          <tr>
            <td className="p-2 border border-blue-200">2‚Äì3</td>
            <td className="p-2 border border-blue-200">ƒê·ªô d√†i d·ªØ li·ªáu</td>
            <td className="p-2 border border-blue-200">2 byte</td>
          </tr>
          <tr>
            <td className="p-2 border border-blue-200">4‚Äìn</td>
            <td className="p-2 border border-blue-200">N·ªôi dung d·ªØ li·ªáu</td>
            <td className="p-2 border border-blue-200">n byte</td>
          </tr>
        </tbody>
      </table>

      <pre className="bg-gray-900 text-white rounded-lg p-4 overflow-x-auto mb-6 text-sm">
{`unsigned char packet[256];
packet[0] = 0x01; // Type
packet[1] = 0x00;
packet[2] = 0x0A; // Length = 10 bytes
packet[3] = 0x00;
memcpy(&packet[4], "HelloWorld", 10);
send(sock, packet, 14, 0);`}
      </pre>

      <h2 className="text-2xl font-semibold text-blue-600 mt-8 mb-2">
        ‚ö° 6. T·ªïng k·∫øt
      </h2>

      <table className="w-full text-left border border-blue-200">
        <thead>
          <tr className="bg-blue-100">
            <th className="p-2 border border-blue-200">Th√†nh ph·∫ßn</th>
            <th className="p-2 border border-blue-200">Vai tr√≤</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td className="p-2 border border-blue-200">Struct</td>
            <td className="p-2 border border-blue-200">
              T·ªï ch·ª©c d·ªØ li·ªáu c√≥ c·∫•u tr√∫c (ƒë·ªãa ch·ªâ, g√≥i tin, header‚Ä¶)
            </td>
          </tr>
          <tr>
            <td className="p-2 border border-blue-200">M·∫£ng (Array/Buffer)</td>
            <td className="p-2 border border-blue-200">
              L∆∞u d·ªØ li·ªáu th·ª±c t·∫ø g·ª≠i ho·∫∑c nh·∫≠n
            </td>
          </tr>
          <tr>
            <td className="p-2 border border-blue-200">Byte array</td>
            <td className="p-2 border border-blue-200">
              D·∫°ng nh·ªã ph√¢n c·ªßa d·ªØ li·ªáu khi truy·ªÅn qua m·∫°ng
            </td>
          </tr>
          <tr>
            <td className="p-2 border border-blue-200">Packing/Unpacking</td>
            <td className="p-2 border border-blue-200">
              Qu√° tr√¨nh chuy·ªÉn ƒë·ªïi gi·ªØa struct v√† m·∫£ng byte
            </td>
          </tr>
          <tr>
            <td className="p-2 border border-blue-200">Socket</td>
            <td className="p-2 border border-blue-200">
              Giao di·ªán truy·ªÅn d·ªØ li·ªáu gi·ªØa c√°c ti·∫øn tr√¨nh qua m·∫°ng
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  );
}
